import { httpClient } from "./client";
import { AppFormResponse } from "../types/app-form";

export const applicationApi = {
  async getFormSchema(appName: string): Promise<AppFormResponse> {
    // Mock different responses per app - replace with actual API call when backend is ready
    const mockResponses: Record<string, AppFormResponse> = {
      cellRanger: {
        appName: "cellRanger",
        description: "Mock description of cellRanger",
        fields: [
          {
            name: "cores",
            type: "select",
            label: "CPU Cores",
            options: ["4", "8", "16", "32"],
            default: "8",
            required: true,
          },
          {
            name: "memory",
            type: "select",
            label: "Memory (GB)",
            options: ["32", "64", "128", "256"],
            default: "64",
            required: true,
          },
          {
            name: "partition",
            type: "select",
            label: "Partition",
            options: ["normal", "highmem", "priority"],
            default: "normal",
            required: true,
          },
          {
            name: "chemistry",
            type: "select",
            label: "Chemistry Version",
            options: ["auto", "SC3Pv3", "SC5P-PE", "SC3Pv2", "SC3Pv1"],
            default: "auto",
            required: true,
          },
          {
            name: "expectedCells",
            type: "number",
            label: "Expected Number of Cells",
            min: 500,
            max: 50000,
            default: 3000,
            required: true,
          },
          {
            name: "forcedCells",
            type: "number",
            label: "Force Cell Count (optional)",
            min: 100,
            max: 100000,
            placeholder: "Leave empty for auto-detection",
          },
          {
            name: "includeIntrons",
            type: "select",
            label: "Include Intronic Reads",
            options: ["true", "false"],
            default: "false",
            required: true,
          },
          {
            name: "localMem",
            type: "number",
            label: "Local Memory per Core (GB)",
            min: 1,
            max: 16,
            default: 4,
            required: true,
          },
          {
            name: "transcriptome",
            type: "text",
            label: "Transcriptome Reference",
            placeholder: "Path to transcriptome reference",
            default: "/references/refdata-gex-GRCh38-2020-A",
            required: true,
          },
        ],
      },
      seurat: {
        appName: "seurat",
        description: "Mock description of seurat",
        fields: [
          {
            name: "cores",
            type: "select",
            label: "CPU Cores",
            options: ["2", "4", "8", "16"],
            default: "4",
            required: true,
          },
          {
            name: "memory",
            type: "select",
            label: "Memory (GB)",
            options: ["16", "32", "64", "128"],
            default: "32",
            required: true,
          },
          {
            name: "partition",
            type: "select",
            label: "Partition",
            options: ["normal", "highmem"],
            default: "normal",
            required: true,
          },
          {
            name: "minCells",
            type: "number",
            label: "Minimum Cells per Gene",
            min: 1,
            max: 100,
            default: 3,
            required: true,
          },
          {
            name: "minFeatures",
            type: "number",
            label: "Minimum Features per Cell",
            min: 50,
            max: 10000,
            default: 200,
            required: true,
          },
          {
            name: "maxFeatures",
            type: "number",
            label: "Maximum Features per Cell",
            min: 1000,
            max: 50000,
            default: 2500,
            required: true,
          },
          {
            name: "mitochondrialPercent",
            type: "number",
            label: "Max Mitochondrial Gene %",
            min: 5,
            max: 50,
            default: 20,
            required: true,
          },
          {
            name: "resolution",
            type: "number",
            label: "Clustering Resolution",
            min: 0.1,
            max: 2.0,
            default: 0.5,
            required: true,
          },
          {
            name: "dims",
            type: "number",
            label: "PCA Dimensions",
            min: 10,
            max: 100,
            default: 30,
            required: true,
          },
          {
            name: "algorithm",
            type: "select",
            label: "Clustering Algorithm",
            options: ["leiden", "louvain", "slm"],
            default: "leiden",
            required: true,
          },
          {
            name: "normalizationMethod",
            type: "select",
            label: "Normalization Method",
            options: ["LogNormalize", "CLR", "RC"],
            default: "LogNormalize",
            required: true,
          },
          {
            name: "findAllMarkers",
            type: "select",
            label: "Find All Markers",
            options: ["true", "false"],
            default: "true",
            required: true,
          },
        ],
      },
      scanpy: {
        appName: "scanpy",
        description: "Mock description of scanpy",
        fields: [
          {
            name: "cores",
            type: "select",
            label: "CPU Cores",
            options: ["2", "4", "8", "16", "32"],
            default: "8",
            required: true,
          },
          {
            name: "memory",
            type: "select",
            label: "Memory (GB)",
            options: ["16", "32", "64", "128", "256"],
            default: "64",
            required: true,
          },
          {
            name: "partition",
            type: "select",
            label: "Partition",
            options: ["normal", "highmem", "gpu"],
            default: "normal",
            required: true,
          },
          {
            name: "minGenes",
            type: "number",
            label: "Minimum Genes per Cell",
            min: 50,
            max: 5000,
            default: 200,
            required: true,
          },
          {
            name: "minCells",
            type: "number",
            label: "Minimum Cells per Gene",
            min: 1,
            max: 100,
            default: 3,
            required: true,
          },
          {
            name: "maxGenes",
            type: "number",
            label: "Maximum Genes per Cell",
            min: 1000,
            max: 20000,
            default: 5000,
            required: true,
          },
          {
            name: "mitochondrialThreshold",
            type: "number",
            label: "Mitochondrial Gene Threshold (%)",
            min: 5,
            max: 50,
            default: 20,
            required: true,
          },
          {
            name: "normalizePerCell",
            type: "number",
            label: "Target Sum per Cell",
            min: 1000,
            max: 100000,
            default: 10000,
            required: true,
          },
          {
            name: "nTopGenes",
            type: "number",
            label: "Highly Variable Genes Count",
            min: 500,
            max: 10000,
            default: 2000,
            required: true,
          },
          {
            name: "pcaComponents",
            type: "number",
            label: "PCA Components",
            min: 10,
            max: 100,
            default: 50,
            required: true,
          },
          {
            name: "neighborhoodSize",
            type: "number",
            label: "Neighborhood Size",
            min: 5,
            max: 100,
            default: 15,
            required: true,
          },
          {
            name: "umapMinDist",
            type: "number",
            label: "UMAP Min Distance",
            min: 0.01,
            max: 1.0,
            default: 0.5,
            required: true,
          },
          {
            name: "clusteringMethod",
            type: "select",
            label: "Clustering Method",
            options: ["leiden", "louvain"],
            default: "leiden",
            required: true,
          },
          {
            name: "clusteringResolution",
            type: "number",
            label: "Clustering Resolution",
            min: 0.1,
            max: 2.0,
            default: 0.5,
            required: true,
          },
          {
            name: "rankGenesGroups",
            type: "select",
            label: "Find Marker Genes",
            options: ["true", "false"],
            default: "true",
            required: true,
          },
          {
            name: "plotResults",
            type: "select",
            label: "Generate Plots",
            options: ["true", "false"],
            default: "true",
            required: true,
          },
        ],
      },
    };

    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(mockResponses[appName] || mockResponses.cellRanger);
      }, 800);
    });

    // Future implementation when backend is ready:
    // return httpClient.request<AppFormResponse>(`/api/v1/applications/${appName}/form`, {
    //   method: 'GET',
    // });
  },
};

