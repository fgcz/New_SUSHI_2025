name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RUBY_VERSION: 3.2.3
  NODE_VERSION: 22.16.0

jobs:
  test-backend:
    name: Backend Tests (Rails)
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ./backend
    
    - name: Setup Database
      run: |
        bundle exec rails db:create RAILS_ENV=test
        bundle exec rails db:migrate RAILS_ENV=test
      env:
        RAILS_ENV: test
    
    - name: Run Backend Tests
      run: bundle exec rspec --format progress
      env:
        RAILS_ENV: test
    
    - name: Upload Backend Coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage/

  test-frontend:
    name: Frontend Tests (Next.js)
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Run Frontend Tests
      run: npm run test:ci
    
    - name: Build Frontend
      run: npm run build
    
    - name: Upload Frontend Coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker Image
      run: |
        cd backend
        docker build -f Dockerfile.dev -t sushi-backend:test .
    
    - name: Build Frontend Docker Image
      run: |
        cd frontend
        docker build -f Dockerfile.dev -t sushi-frontend:test .
    
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        echo "✅ Docker Compose configuration is valid"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ./backend
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install Frontend Dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Setup Database
      run: |
        bundle exec rails db:create RAILS_ENV=test
        bundle exec rails db:migrate RAILS_ENV=test
      working-directory: ./backend
      env:
        RAILS_ENV: test
    
    - name: Start Backend Server
      run: |
        bundle exec rails server -e test -p 4000 &
        sleep 10
      working-directory: ./backend
      env:
        RAILS_ENV: test
    
    - name: Test API Connectivity
      run: |
        curl -f http://localhost:4000/api/v1/hello || exit 1
        echo "✅ API connectivity test passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ./backend
    
    - name: Run Brakeman Security Scan
      run: bundle exec brakeman --no-progress --format json --output brakeman-report.json
      working-directory: ./backend
      continue-on-error: true
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: backend/brakeman-report.json

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ./backend
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install Frontend Dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Run Backend Linting
      run: bundle exec rubocop
      working-directory: ./backend
      continue-on-error: true  # 最初は警告として実行
    
    - name: Run Frontend Linting
      run: npm run lint
      working-directory: ./frontend

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test, lint, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test, lint, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh production
    
    - name: Deployment Summary
      run: |
        echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- Integration: ✅ API connectivity verified" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ✅ Brakeman scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- Docker: ✅ Builds successful" >> $GITHUB_STEP_SUMMARY
        echo "- Quality: ✅ Linting completed" >> $GITHUB_STEP_SUMMARY 