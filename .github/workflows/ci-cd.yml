name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUBY_VERSION: 3.3.7
  NODE_VERSION: 22.16.0
  COMMON_SUSHI_DIR: /misc/fgcz01/sushi/new_SUSHI_2025

jobs:
  test-backend:
    name: Backend Tests (Rails)
    runs-on: [self-hosted, linux, fgcz-h-037, new-sushi]
    timeout-minutes: 20
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load environment modules (Ruby/Node)
      shell: bash
      run: |
        source /usr/local/ngseq/etc/lmod_profile || true
        source /etc/profile.d/modules.sh || true
        module load Dev/Ruby/${RUBY_VERSION}
        module load Dev/node/${NODE_VERSION}

    - name: Prime backend gems from shared dir (optional)
      shell: bash
      run: |
        rsync -a --delete "$COMMON_SUSHI_DIR/backend/vendor" . || true
        bundle config set --local path 'vendor/bundle'

    - name: Cache bundler vendor directory
      uses: actions/cache@v4
      with:
        path: backend/vendor
        key: bundler-${{ runner.os }}-${{ env.RUBY_VERSION }}-${{ hashFiles('backend/Gemfile.lock') }}
        restore-keys: |
          bundler-${{ runner.os }}-${{ env.RUBY_VERSION }}-

    - name: Install backend gems
      shell: bash
      run: |
        bundle install --jobs 4 --retry 3
    
    - name: Setup Database
      run: |
        bundle exec rails db:prepare
      env:
        RAILS_ENV: test
    
    - name: Run Backend Tests
      run: bundle exec rspec --format progress
      env:
        RAILS_ENV: test
    
    - name: Upload Backend Coverage (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage/

    - name: Upload backend logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: backend-logs
        path: |
          backend/log/**
          backend/tmp/**
          backend/coverage/**

  test-frontend:
    name: Frontend Tests (Next.js)
    runs-on: [self-hosted, linux, fgcz-h-037, new-sushi]
    timeout-minutes: 20
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load environment modules (Ruby/Node)
      shell: bash
      run: |
        source /usr/local/ngseq/etc/lmod_profile || true
        source /etc/profile.d/modules.sh || true
        module load Dev/Ruby/${RUBY_VERSION}
        module load Dev/node/${NODE_VERSION}

    - name: Prime node_modules from shared dir (optional)
      shell: bash
      run: |
        rsync -a --delete "$COMMON_SUSHI_DIR/frontend/node_modules" . || true

    - name: Cache npm node_modules
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: npm-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-${{ env.NODE_VERSION }}-
    
    - name: Install Dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Run Frontend Tests
      run: npm run test:ci
    
    - name: Build Frontend
      run: npm run build
    
    - name: Upload Frontend Coverage (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Lint Backend Dockerfile with hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile.dev

    - name: Lint Frontend Dockerfile with hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile.dev
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker Image
      run: |
        cd backend
        docker build -f Dockerfile.dev -t sushi-backend:test .
    
    - name: Build Frontend Docker Image
      run: |
        cd frontend
        docker build -f Dockerfile.dev -t sushi-frontend:test .
    
    - name: Test Docker Compose (dev/prod)
      run: |
        docker compose -f compose.dev.yml config
        docker compose -f compose.prod.yml config
        echo "✅ Docker Compose configurations (dev/prod) are valid"

  integration-test:
    name: Integration Tests
    runs-on: [self-hosted, linux, fgcz-h-037, new-sushi]
    needs: [test-backend, test-frontend]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load environment modules (Ruby/Node)
      shell: bash
      run: |
        source /usr/local/ngseq/etc/lmod_profile || true
        source /etc/profile.d/modules.sh || true
        module load Dev/Ruby/${RUBY_VERSION}
        module load Dev/node/${NODE_VERSION}

    - name: Prime backend gems from shared dir (optional)
      shell: bash
      working-directory: ./backend
      run: |
        rsync -a --delete "$COMMON_SUSHI_DIR/backend/vendor" . || true
        bundle config set --local path 'vendor/bundle'
        bundle install --jobs 4 --retry 3
    
    - name: Setup Database
      run: |
        bundle exec rails db:prepare
      working-directory: ./backend
      env:
        RAILS_ENV: test
    
    - name: Start Backend Server
      run: |
        echo "Skipping server start per request"
      working-directory: ./backend
      env:
        RAILS_ENV: test
    
    - name: Test API Connectivity
      run: |
        echo "Skipping API connectivity check per request"

  security-scan:
    name: Security Scan
    runs-on: [self-hosted, linux, fgcz-h-037, new-sushi]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load environment modules (Ruby/Node)
      shell: bash
      run: |
        source /usr/local/ngseq/etc/lmod_profile || true
        source /etc/profile.d/modules.sh || true
        module load Dev/Ruby/${RUBY_VERSION}
        module load Dev/node/${NODE_VERSION}

    - name: Prepare gems for scan
      shell: bash
      working-directory: ./backend
      run: |
        rsync -a --delete "$COMMON_SUSHI_DIR/backend/vendor" . || true
        bundle config set --local path 'vendor/bundle'
        bundle install --jobs 4 --retry 3
    
    - name: Run Brakeman Security Scan
      run: bundle exec brakeman --no-progress --format json --output brakeman-report.json
      working-directory: ./backend
      continue-on-error: true
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: backend/brakeman-report.json

    - name: Bundler Audit (advisories)
      working-directory: ./backend
      shell: bash
      run: |
        gem install bundler-audit -N || true
        bundle audit update || true
        bundle audit check || true

    - name: npm audit (high and above)
      working-directory: ./frontend
      run: npm audit --audit-level=high || true

  lint:
    name: Code Quality & Linting
    runs-on: [self-hosted, linux, fgcz-h-037, new-sushi]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load environment modules (Ruby/Node)
      shell: bash
      run: |
        source /usr/local/ngseq/etc/lmod_profile || true
        source /etc/profile.d/modules.sh || true
        module load Dev/Ruby/${RUBY_VERSION}
        module load Dev/node/${NODE_VERSION}

    - name: Prepare backend gems
      shell: bash
      working-directory: ./backend
      run: |
        rsync -a --delete "$COMMON_SUSHI_DIR/backend/vendor" . || true
        bundle config set --local path 'vendor/bundle'
        bundle install --jobs 4 --retry 3

    - name: Install Frontend Dependencies
      shell: bash
      working-directory: ./frontend
      run: |
        rsync -a --delete "$COMMON_SUSHI_DIR/frontend/node_modules" . || true
        npm ci --prefer-offline --no-audit
    
    - name: Run Backend Linting
      run: bundle exec rubocop
      working-directory: ./backend
      continue-on-error: true  # Run as warning first
    
    - name: Run Frontend Linting
      run: npm run lint
      working-directory: ./frontend

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test, lint, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    # environment: 'staging'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test, lint, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # environment: 'production'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Skip deployment (no server start per request)
      run: |
        echo "Skipping production deployment and server start per request"
    
    - name: Deployment Summary
      run: |
        echo "## Production Deployment Summary (server start skipped)" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- Integration: ℹ️ Server start & API check skipped" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ✅ Brakeman scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- Docker: ✅ Builds successful" >> $GITHUB_STEP_SUMMARY
        echo "- Quality: ✅ Linting completed" >> $GITHUB_STEP_SUMMARY